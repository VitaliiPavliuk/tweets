{"version":3,"file":"static/js/850.ac3604bc.chunk.js","mappings":"0LAEaA,EAAe,SAAAC,GAAK,OAAIA,EAAMC,OAAOC,MAAjB,EACpBC,EAAe,SAAAH,GAAK,OAAIA,EAAMC,OAAOG,KAAjB,E,gGCYpBC,EAAa,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAC3B,GAA0CC,EAAAA,EAAAA,UAAS,MAAnD,eAAOC,EAAP,KAAsBC,EAAtB,KACA,GAAkCF,EAAAA,EAAAA,UAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAAoCJ,EAAAA,EAAAA,UAAS,GAA7C,eAAOK,EAAP,KAAmBC,EAAnB,KAEMZ,GAASa,EAAAA,EAAAA,IAAYX,GACrBY,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACR,GAAsB,IAAlBhB,EAAOiB,OAAX,CAIA,IAAMC,EAAYP,EAAaN,EAC/BG,EAAiBR,EAAOmB,MAAMR,EAAYO,IAC1CR,EAAaU,KAAKC,KAAKrB,EAAOiB,OAASZ,GAHtC,MAFCS,GAASQ,EAAAA,EAAAA,KAMZ,GAAE,CAACR,EAAUH,EAAYN,EAAeL,IASzC,OACE,gCAGGO,IACC,gBACEgB,MAAO,CACLC,QAAS,OACTC,cAAe,SACfC,WAAY,UAJhB,UAOE,SAACC,EAAA,EAAD,CAAMC,OAAK,EAACC,GAAI,CAAEC,MAAO,OAAQC,SAAU,KAA3C,SACGxB,EAAcyB,KAAI,SAAAC,GACjB,OACE,UAACC,EAAA,GAAD,YACE,gBAAKC,IAAKF,EAAKG,OAAQC,IAAKJ,EAAKA,QACjC,SAACK,EAAA,EAAD,CACEC,QAAQ,OACRC,QAAO,UAAKP,EAAKjC,OAAV,qBAA6BiC,EAAKQ,UAAlC,iBAET,mBAAQC,QAAS,kBAAM5B,GAAS6B,EAAAA,EAAAA,GAAeV,EAAKW,IAAnC,EAAjB,SACGX,EAAKY,SAAW,YAAc,aAPpBZ,EAAKW,GAWvB,SAIP,gBACErB,MAAO,CAAEC,QAAS,OAAQsB,eAAgB,SAAUC,UAAW,QADjE,UAGE,SAAC,IAAD,CACEC,UAAU,IACVC,aA1CgB,SAAAC,GACtB,IAAMC,EAAaD,EAAME,SAAW/C,EAAiBL,EAAOiB,OAC5DL,EAAcuC,EACf,EAwCOE,mBAAoB,EACpBC,qBAAsB,EACtB7C,UAAWA,EACX8C,cAAc,IACdC,cAAc,YACdC,kBAAkB,YAClBC,kBAAkB,YAClBC,sBAAsB,YACtBC,cAAc,YACdC,kBAAkB,YAClBC,WAAW,MACXC,eAAe,YACfC,mBAAmB,YACnBC,mBAAmB,aACnBC,gBAAgB,SAChBC,sBAAuB,WAgChC,ECrHKC,GAAcC,E,QAAAA,IAAY,CAC9BC,KAAM,SACNC,aANmB,CACnBC,OAAQ,IAORC,SAAU,CACRC,UADQ,SACE3E,EAAO4E,GACf5E,EAAMyE,OAASG,EAAOC,OACvB,KAIUF,EAAcN,EAAYS,QAA1BH,UCdFI,GDegBV,EAAYW,QCfnB,WACpB,IAAMjE,GAAWC,EAAAA,EAAAA,MAEjB,OACE,4BACE,kDACA,kBACEiE,KAAK,OACLC,SAAU,SAAAC,GACRpE,EAAS4D,EAAUQ,EAAEC,OAAOC,MAAMC,cAAcC,QACjD,MAIR,GCWD,MApBA,WACE,IAAMrF,GAASY,EAAAA,EAAAA,IAAYf,GAE3B,OACE,iBACEyB,MAAO,CACLC,QAAS,OACTC,cAAe,SACfC,WAAY,UAJhB,WAOE,SAACoD,EAAD,IAEY,YAAX7E,IAAwB,SAACsF,EAAA,EAAD,KAEzB,SAACnF,EAAD,CAAYC,cAAe,MAGhC,C","sources":["redux/selectors.js","components/TweetsList/TweetsList.jsx","redux/filterSlice.js","components/Filter/Filter.jsx","pages/TweetsPage.jsx"],"sourcesContent":["// import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectStatus = state => state.tweets.status;\nexport const selectTweets = state => state.tweets.users;\n\n// export const selectFilter = state => state.filter.filter;\n\n// export const selectfilteredUsers = createSelector(\n//   selectUsers,\n//   selectFilter,\n//   (contacts, filter) => {\n//     return contacts.filter(contact =>\n//       contact.name.toLowerCase().includes(filter.trim().toLowerCase())\n//     );\n//   }\n// );\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ReactPaginate from 'react-paginate';\n\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemText from '@mui/material/ListItemText';\n\nimport {\n  selectTweets,\n  // selectfilteredContacts,\n} from 'redux/selectors';\nimport { fetchTweets } from 'redux/tweets/tweets.operations';\nimport { toggleFollowed } from 'redux/tweets/tweetsSlice';\n\nexport const TweetsList = ({ tweetsPerPage }) => {\n  const [currentTweets, setCurrentTweets] = useState(null);\n  const [pageCount, setPageCount] = useState(0);\n  const [itemOffset, setItemOffset] = useState(0);\n  // const filteredContacts = useSelector(selectfilteredContacts);\n  const tweets = useSelector(selectTweets);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (tweets.length === 0) {\n      dispatch(fetchTweets());\n      return;\n    }\n    const endOffset = itemOffset + tweetsPerPage;\n    setCurrentTweets(tweets.slice(itemOffset, endOffset));\n    setPageCount(Math.ceil(tweets.length / tweetsPerPage));\n  }, [dispatch, itemOffset, tweetsPerPage, tweets]);\n\n  const handlePageClick = event => {\n    const newOffset = (event.selected * tweetsPerPage) % tweets.length;\n    setItemOffset(newOffset);\n  };\n\n  // console.log(users);\n\n  return (\n    <>\n      {/* <Courses currentCourses={currentCourses} /> */}\n\n      {currentTweets && (\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n          }}\n        >\n          <List dense sx={{ width: '100%', maxWidth: 480 }}>\n            {currentTweets.map(user => {\n              return (\n                <ListItem key={user.id}>\n                  <img src={user.avatar} alt={user.user} />\n                  <ListItemText\n                    divider=\"true\"\n                    primary={`${user.tweets} TWEETS : ${user.followers} FOLLOWERS`}\n                  />\n                  <button onClick={() => dispatch(toggleFollowed(user.id))}>\n                    {user.followed ? 'FOLLOWING' : 'FOLLOW'}\n                  </button>\n                </ListItem>\n              );\n            })}\n          </List>\n        </div>\n      )}\n      <div\n        style={{ display: 'flex', justifyContent: 'center', marginTop: '30px' }}\n      >\n        <ReactPaginate\n          nextLabel=\">\"\n          onPageChange={handlePageClick}\n          pageRangeDisplayed={2}\n          marginPagesDisplayed={1}\n          pageCount={pageCount}\n          previousLabel=\"<\"\n          pageClassName=\"page-item\"\n          pageLinkClassName=\"page-link\"\n          previousClassName=\"page-item\"\n          previousLinkClassName=\"page-link\"\n          nextClassName=\"page-item\"\n          nextLinkClassName=\"page-link\"\n          breakLabel=\"...\"\n          breakClassName=\"page-item\"\n          breakLinkClassName=\"page-link\"\n          containerClassName=\"pagination\"\n          activeClassName=\"active\"\n          renderOnZeroPageCount={null}\n        />\n      </div>\n\n      {/* {users.length !== 0 && (\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n          }}\n        >\n          <List dense sx={{ width: '100%', maxWidth: 480 }}>\n            {users.map(user => {\n              return (\n                <ListItem key={user.id}>\n                  <img src={user.avatar} alt={user.user} />\n                  <ListItemText\n                    divider=\"true\"\n                    primary={`${user.tweets} TWEETS : ${user.followers} FOLLOWERS`}\n                  />\n                  <button onClick={() => dispatch(toggleFollowed(user.id))}>\n                    {user.followed ? 'FOLLOWING' : 'FOLLOW'}\n                  </button>\n                </ListItem>\n              );\n            })}\n          </List>\n        </div>\n      )} */}\n    </>\n  );\n};\n","import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  filter: '',\n};\n\nconst filterSlice = createSlice({\n  name: 'filter',\n  initialState,\n\n  reducers: {\n    setFilter(state, action) {\n      state.filter = action.payload;\n    },\n  },\n});\n\nexport const { setFilter } = filterSlice.actions;\nexport const filterReducer = filterSlice.reducer;\n","import { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <div>\n      <p>Find contacts by name</p>\n      <input\n        type=\"text\"\n        onChange={e => {\n          dispatch(setFilter(e.target.value.toLowerCase().trim()));\n        }}\n      />\n    </div>\n  );\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { selectStatus } from '../redux/selectors';\nimport { Loader } from 'components/Loader/Loader';\nimport { TweetsList } from 'components/TweetsList/TweetsList';\nimport { Filter } from 'components/Filter/Filter';\n\nfunction TweetsPage() {\n  const status = useSelector(selectStatus);\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n      }}\n    >\n      <Filter />\n\n      {status === 'pending' && <Loader />}\n\n      <TweetsList tweetsPerPage={3} />\n    </div>\n  );\n}\n\nexport default TweetsPage;\n"],"names":["selectStatus","state","tweets","status","selectTweets","users","TweetsList","tweetsPerPage","useState","currentTweets","setCurrentTweets","pageCount","setPageCount","itemOffset","setItemOffset","useSelector","dispatch","useDispatch","useEffect","length","endOffset","slice","Math","ceil","fetchTweets","style","display","flexDirection","alignItems","List","dense","sx","width","maxWidth","map","user","ListItem","src","avatar","alt","ListItemText","divider","primary","followers","onClick","toggleFollowed","id","followed","justifyContent","marginTop","nextLabel","onPageChange","event","newOffset","selected","pageRangeDisplayed","marginPagesDisplayed","previousLabel","pageClassName","pageLinkClassName","previousClassName","previousLinkClassName","nextClassName","nextLinkClassName","breakLabel","breakClassName","breakLinkClassName","containerClassName","activeClassName","renderOnZeroPageCount","filterSlice","createSlice","name","initialState","filter","reducers","setFilter","action","payload","actions","Filter","reducer","type","onChange","e","target","value","toLowerCase","trim","Loader"],"sourceRoot":""}